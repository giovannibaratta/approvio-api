openapi: 3.0.0
info:
  title: Workflow Approval System API
  description: API for a SaaS platform that allows customers to manage approvals for generic workflows, users, and groups.
  version: 0.0.5

tags:
  - name: Workflows
    description: Workflow management and approval
  - name: Workflow Templates
    description: Workflow template management
  - name: Users
    description: User management
  - name: Groups
    description: Group management
  - name: Workflow Actions
    description: Workflow actions and voting

paths:
  /workflows:
    post:
      summary: Create a new workflow
      description: Creates a new workflow with approvers and rules
      operationId: createWorkflow
      tags:
        - Workflows
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowCreate"
      responses:
        "201":
          description: Workflow created successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    get:
      summary: List workflows
      description: Returns a list of workflows with optional filtering
      operationId: listWorkflows
      tags:
        - Workflows
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
        - name: include
          in: query
          description: Comma-separated list of related objects to include in the response
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - workflow-template
      responses:
        "200":
          description: List of workflows
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Workflow"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /workflows/{workflowId}:
    get:
      summary: Get workflow details
      description: Returns the details of a specific workflow
      operationId: getWorkflow
      tags:
        - Workflows
      parameters:
        - name: workflowId
          in: path
          required: true
          description: The unique identifier of the workflow
          schema:
            type: string
        - name: include
          in: query
          description: Comma-separated list of related objects to include in the response
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - workflow-template
      responses:
        "200":
          description: Workflow details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workflow"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{workflowId}/vote:
    post:
      summary: Vote on a workflow
      description: Allows an authenticated entity to cast a vote (approve or veto) on a specific workflow.
      operationId: voteOnWorkflow
      tags:
        - Workflow Actions
      parameters:
        - name: workflowId
          in: path
          required: true
          description: The unique identifier of the workflow
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowVoteRequest"
      responses:
        "200":
          description: Vote cast successfully. Returns updated workflow details.
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request (e.g., voter not authorized, invalid vote type/mode).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "401":
          $ref: "#/components/responses/Unauthorized"

        "404":
          $ref: "#/components/responses/NotFound"

  /workflows/{workflowId}/canVote:
    get:
      summary: Check if the current entity can vote on a workflow
      description: Determines if the authenticated entity is eligible to cast a vote on the specified workflow.
      operationId: canVoteOnWorkflow
      tags:
        - Workflow Actions
      parameters:
        - name: workflowId
          in: path
          required: true
          description: The unique identifier of the workflow.
          schema:
            type: string
      responses:
        "200":
          description: Eligibility to vote confirmed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CanVoteResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /users:
    post:
      summary: Create a new user
      description: Creates a new user in the system.
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          description: User with this email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    get:
      summary: List users
      description: Returns a list of users
      operationId: listUsers
      tags:
        - Users
      parameters:
        - name: search
          in: query
          description: Fuzzy search term for user display name or email.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                  - pagination
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserSummary"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /users/{userId}:
    get:
      summary: Get user details
      description: Returns the details of a specific user by their ID.
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The unique identifier (UUID) of the user.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /groups:
    post:
      summary: Create a new approver group
      description: Create a new group for organizing approvers
      operationId: createGroup
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupCreate"
      responses:
        "201":
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    get:
      summary: List groups
      description: Returns a list of groups
      operationId: listGroups
      tags:
        - Groups
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: List of groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: "#/components/schemas/Group"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                required:
                  - groups
                  - pagination
        "401":
          $ref: "#/components/responses/Unauthorized"

  /groups/{groupIdentifier}:
    get:
      summary: Get group details
      description: Returns the details of a specific group
      operationId: getGroup
      tags:
        - Groups
      parameters:
        - name: groupIdentifier
          in: path
          required: true
          description: The unique identifier of the group or the name of the group
          schema:
            type: string
      responses:
        "200":
          description: Group details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /groups/{groupId}/entities:
    get:
      summary: List entities in a group
      description: Returns a list of all entities (users, systems, etc.) that belong to a specific group, including their roles.
      operationId: listGroupEntities
      tags:
        - Groups
        - Users
      parameters:
        - name: groupId
          in: path
          required: true
          description: The unique identifier (UUID) of the group.
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: List of entities in the group
          content:
            application/json:
              schema:
                type: object
                required:
                  - entities
                  - pagination
                properties:
                  entities:
                    type: array
                    items:
                      $ref: "#/components/schemas/GroupMembership"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    post:
      summary: Add group entities
      description: Add entities (like users) within a specific group.
      operationId: addGroupEntities
      tags:
        - Groups
        - Users
      parameters:
        - name: groupId
          in: path
          required: true
          description: The unique identifier (UUID) of the group.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddGroupEntitiesRequest"
      responses:
        "200":
          description: Entities managed successfully. Returns updated group details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "409":
          description: Conflict detected (e.g., adding an existing member).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
    delete:
      summary: Remove group entities
      description: Remove entities (like users) from a specific group.
      operationId: removeGroupEntities
      tags:
        - Groups
        - Users
      parameters:
        - name: groupId
          in: path
          required: true
          description: The unique identifier (UUID) of the group.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveGroupEntitiesRequest"
      responses:
        "200":
          description: Entities removed successfully. Returns updated group details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
        "409":
          description: Conflict detected (e.g. removing a non-member).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"

  /workflow-templates:
    post:
      summary: Create a new workflow template
      description: Creates a new workflow template with approval rules, actions, and default expiry settings
      operationId: createWorkflowTemplate
      tags:
        - Workflow Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowTemplateCreate"
      responses:
        "201":
          description: Workflow template created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowTemplate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    get:
      summary: List workflow templates
      description: Returns a list of workflow templates with optional filtering
      operationId: listWorkflowTemplates
      tags:
        - Workflow Templates
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: List of workflow templates
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/WorkflowTemplateSummary"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /workflow-templates/{templateId}:
    get:
      summary: Get workflow template details
      description: Returns the details of a specific workflow template
      operationId: getWorkflowTemplate
      tags:
        - Workflow Templates
      parameters:
        - name: templateId
          in: path
          required: true
          description: The unique identifier of the workflow template
          schema:
            type: string
      responses:
        "200":
          description: Workflow template details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowTemplate"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      summary: Update a workflow template
      description: Updates an existing workflow template
      operationId: updateWorkflowTemplate
      tags:
        - Workflow Templates
      parameters:
        - name: templateId
          in: path
          required: true
          description: The unique identifier of the workflow template
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowTemplateUpdate"
      responses:
        "200":
          description: Workflow template updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowTemplate"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete a workflow template
      description: Deletes a workflow template
      operationId: deleteWorkflowTemplate
      tags:
        - Workflow Templates
      parameters:
        - name: templateId
          in: path
          required: true
          description: The unique identifier of the workflow template
          schema:
            type: string
      responses:
        "204":
          description: Workflow template deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  schemas:
    UserSummary:
      type: object
      required:
        - id
        - displayName
        - email
      properties:
        id:
          type: string
          format: uuid
          description: Internal unique identifier for the user.
          readOnly: true
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        displayName:
          type: string
          description: User's display name.
          example: "Alex Chen"
        email:
          type: string
          format: email
          description: User's email address.
          example: "alex.chen@example.com"
    UserCreate:
      type: object
      required:
        - displayName
        - email
        - orgRole
      properties:
        displayName:
          type: string
          description: User's display name.
          example: "Alex Chen"
        email:
          type: string
          format: email
          description: User's email address (must be unique).
          example: "alex.chen@example.com"
        orgRole:
          type: string
          x-extensible-enum:
            - admin
            - member
          description: Role assigned to the user within the group.
          example: "member"
    User:
      type: object
      required:
        - id
        - displayName
        - email
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Internal unique identifier for the user.
          readOnly: true
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        displayName:
          type: string
          description: User's display name.
          example: "Alex Chen"
        email:
          type: string
          format: email
          description: User's email address.
          example: "alex.chen@example.com"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user was created.
          readOnly: true
          example: "2025-04-15T12:05:00Z"

    EntityReference:
      type: object
      required:
        - entityType
        - entityId
      properties:
        entityType:
          type: string
          x-extensible-enum:
            - human
            - system
          description: The type of the entity being referenced.
          example: human
        entityId:
          type: string
          format: uuid
          description: The unique identifier (UUID) of the entity.
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"

    EntityMembershipAdd:
      type: object
      required:
        - entity
        - role
      properties:
        entity:
          $ref: "#/components/schemas/EntityReference"
        role:
          type: string
          x-extensible-enum:
            - approver
            - admin
            - owner
            - auditor
          description: Role assigned to the entity within the group.
          example: "approver"

    EntityMembershipRemove:
      type: object
      required:
        - entity
      properties:
        entity:
          $ref: "#/components/schemas/EntityReference"

    AddGroupEntitiesRequest:
      type: object
      description: Defines operations to add entities within a group
      required:
        - entities
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/EntityMembershipAdd"
          description: List of entities to add to the group.

    RemoveGroupEntitiesRequest:
      type: object
      description: Defines operations to remove entities within a group
      required:
        - entities
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/EntityMembershipRemove"
          description: List of entities to remove from the group.

    GroupMembership:
      type: object
      required:
        - entity
        - role
        - addedAt
      properties:
        entity:
          $ref: "#/components/schemas/EntityReference"
        role:
          type: string
          x-extensible-enum:
            - approver
            - admin
            - owner
            - auditor
          description: The role of the entity within the group.
          example: "approver"
        addedAt:
          type: string
          format: date-time
          description: Timestamp when the entity was added to the group.
          readOnly: true
          example: "2025-04-16T10:30:00Z"

    WorkflowTemplateSummary:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Internal unique identifier for the workflow template.
          readOnly: true
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        name:
          type: string
          description: User-friendly name for the workflow template.
          example: "New Workflow Template"
        description:
          type: string
          description: Detailed description of the workflow template.
          example: "This is a new workflow template"
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the workflow template was created.
          readOnly: true
          example: "2025-04-15T12:05:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the workflow template was last updated.
          readOnly: true
          example: "2025-04-15T12:05:00Z"

    WorkflowCreate:
      type: object
      required:
        - name
        - workflowTemplateId
      properties:
        name:
          type: string
          description: User-friendly name for the workflow
        description:
          type: string
          description: Detailed description of the workflow
        metadata:
          type: object
          description: Additional custom metadata for the workflow
        workflowTemplateId:
          type: string
          format: uuid
          description: The unique identifier of the workflow template to use as parent

    Workflow:
      type: object
      required:
        - id
        - name
        - status
        - workflowTemplateId
        - metadata
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the workflow
        name:
          type: string
          description: User-friendly name for the workflow
        description:
          type: string
          description: Detailed description of the workflow
        status:
          type: string
          x-extensible-enum:
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELED
            - EVALUATION_IN_PROGRESS
          description: Current status of the workflow
        workflowTemplateId:
          type: string
          format: uuid
          description: The unique identifier of the workflow template used as parent
        metadata:
          type: object
          description: Additional custom metadata for the workflow
        ref:
          type: object
          description: Referenced objects (optional, controlled by include query parameters)
          properties:
            workflowTemplate:
              $ref: "#/components/schemas/WorkflowTemplate"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ApprovalRule:
      description: >
        Configuration of approval rules. Can be a boolean operator (AND/OR)
        combining nested rules, or a specific requirement (minimum count from
        a group).
      oneOf:
        - $ref: "#/components/schemas/AndRule"
        - $ref: "#/components/schemas/OrRule"
        - $ref: "#/components/schemas/GroupRequirementRule"
      discriminator:
        propertyName: type
        mapping:
          AND: "#/components/schemas/AndRule"
          OR: "#/components/schemas/OrRule"
          GROUP_REQUIREMENT: "#/components/schemas/GroupRequirementRule"

    AndRule:
      type: object
      description: An AND rule requiring all nested rules to be satisfied.
      required:
        - type
        - rules
      properties:
        type:
          type: string
          enum: [AND]
          description: Rule type (AND)
        rules:
          type: array
          description: List of rules that must all be satisfied. Cannot be empty.
          minItems: 1
          items:
            $ref: "#/components/schemas/ApprovalRule"

    OrRule:
      type: object
      description: An OR rule requiring at least one of the nested rules to be satisfied.
      required:
        - type
        - rules
      properties:
        type:
          type: string
          enum: [OR]
          description: Rule type (OR)
        rules:
          type: array
          description: List of rules where at least one must be satisfied. Cannot be empty.
          minItems: 1
          items:
            $ref: "#/components/schemas/ApprovalRule"

    GroupRequirementRule:
      type: object
      description: Requires a minimum number of approvals from a specific group.
      required:
        - type
        - groupId
        - minCount
      properties:
        type:
          type: string
          enum: [GROUP_REQUIREMENT]
          description: Rule type (GROUP_REQUIREMENT)
        groupId:
          type: string
          description: ID of the approver group.
        minCount:
          type: integer
          description: Minimum number of approvals required from the group. Must be at least 1.
          minimum: 1

    GroupCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the group
        description:
          type: string
          description: Description of the group

    Group:
      type: object
      required:
        - id
        - name
        - entitiesCount
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the group
        name:
          type: string
          description: Name of the group
        description:
          type: string
          description: Description of the group
        entitiesCount:
          type: integer
          description: Number of entities in the group
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    Pagination:
      type: object
      required:
        - total
        - page
        - limit
      properties:
        total:
          type: integer
          description: Total number of items
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Items per page

    APIError:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    WorkflowVoteRequest:
      type: object
      title: WorkflowVoteRequest
      required:
        - voteType
      properties:
        reason:
          type: string
          description: Optional reason for the vote. Can be used for approval comments or reject reasons.
          example: "Missing critical information or LGTM!"
        voteType:
          oneOf:
            - $ref: "#/components/schemas/VoteApprove"
            - $ref: "#/components/schemas/VoteVeto"
            - $ref: "#/components/schemas/VoteWithdraw"
          discriminator:
            propertyName: type
            mapping:
              APPROVE: "#/components/schemas/VoteApprove"
              VETO: "#/components/schemas/VoteVeto"
              WITHDRAW: "#/components/schemas/VoteWithdraw"

    CanVoteResponse:
      type: object
      title: CanVoteResponse
      required:
        - canVote
        - voteStatus
      properties:
        canVote:
          type: boolean
          description: True if the authenticated entity can currently vote on the workflow, false otherwise.
        voteStatus:
          type: string
          x-extensible-enum:
            - ALREADY_VOTED
            - VOTE_PENDING
          description: |
            Indicates the voting status for the user on this workflow.
            Relevant only if 'canVote' is true or if the user had voting rights previously.
          example: VOTE_PENDING

    VoteApprove:
      type: object
      required:
        - type
        - votedForGroups
      properties:
        type:
          type: string
          enum: [APPROVE]
          description: Vote type (APPROVE)
        votedForGroups:
          type: array
          items:
            type: string
            format: uuid
          description: List of group IDs the vote is cast for.
          example: ["a1b2c3d4-e5f6-7890-1234-567890abcdef"]

    VoteVeto:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [VETO]
          description: Vote type (VETO)

    VoteWithdraw:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [WITHDRAW]
          description: Vote type (WITHDRAW)

    WorkflowTemplateCreate:
      type: object
      required:
        - name
        - approvalRule
      properties:
        name:
          type: string
          description: User-friendly name for the workflow template
        description:
          type: string
          description: Detailed description of the workflow template
        metadata:
          type: object
          description: Additional custom metadata for the workflow template
        approvalRule:
          $ref: "#/components/schemas/ApprovalRule"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowAction"
          description: Actions to be executed when workflow is approved
        defaultExpiresInHours:
          type: integer
          minimum: 1
          maximum: 8760
          description: Default expiry time for workflows created from this template (in hours, max 1 year)

    WorkflowTemplate:
      type: object
      required:
        - id
        - name
        - approvalRule
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the workflow template
        name:
          type: string
          description: User-friendly name for the workflow template
        description:
          type: string
          description: Detailed description of the workflow template
        approvalRule:
          $ref: "#/components/schemas/ApprovalRule"
        metadata:
          type: object
          description: Additional custom metadata for the workflow template
        actions:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowAction"
          description: Actions to be executed when workflow is approved
        defaultExpiresInHours:
          type: integer
          minimum: 1
          maximum: 8760
          description: Default expiry time for workflows created from this template (in hours, max 1 year)
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    WorkflowTemplateUpdate:
      type: object
      properties:
        name:
          type: string
          description: User-friendly name for the workflow template
        description:
          type: string
          description: Detailed description of the workflow template
        metadata:
          type: object
          description: Additional custom metadata for the workflow template
        approvalRule:
          $ref: "#/components/schemas/ApprovalRule"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowAction"
          description: Actions to be executed when workflow is approved
        defaultExpiresInHours:
          type: integer
          minimum: 1
          maximum: 8760
          description: Default expiry time for workflows created from this template (in hours, max 1 year)

    WorkflowAction:
      description: >
        Configuration for actions to be executed when workflow is approved.
        Currently supports email actions.
      oneOf:
        - $ref: "#/components/schemas/EmailAction"
      discriminator:
        propertyName: type
        mapping:
          EMAIL: "#/components/schemas/EmailAction"

    EmailAction:
      type: object
      description: Sends an email when workflow is approved
      required:
        - type
        - recipients
      properties:
        type:
          type: string
          enum: [EMAIL]
          description: Action type (EMAIL)
        recipients:
          type: array
          items:
            type: string
            format: email
          description: List of email addresses to send the notification to
          minItems: 1
          maxItems: 5

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APIError"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
